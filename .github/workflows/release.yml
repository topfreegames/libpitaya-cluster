name: Release NPitaya NPM to Artifactory

on:
  workflow_run:
    workflows: ["Build NPitaya Native Libraries"]
    types:
      - completed
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      version:
        description: "Version/tag to release (leave empty for latest tag)"
        required: false
        default: ""
      auto_bump:
        description: "Auto bump version"
        required: false
        default: "true"

jobs:
  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: latest-tag
        run: |
          # Get the latest tag from the repository
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Latest tag: $LATEST_TAG"
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Determine version to use
        id: version
        run: |
          # Use provided version or fall back to latest tag
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using provided version: $VERSION"
          else
            VERSION="${{ steps.latest-tag.outputs.tag }}"
            echo "Using latest tag: $VERSION"
          fi

          # Strip 'v' prefix if present
          VERSION=$(echo "$VERSION" | sed 's/^v//')
          echo "Final version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if version needs updating
        id: check-version
        run: |
          # Check if auto_bump is disabled
          if [ "${{ github.event.inputs.auto_bump }}" = "false" ]; then
            echo "⏭️  Auto bump is disabled - skipping version commit"
            echo "needs-commit=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get current version from version.txt
          if [ -f "cpp-lib/version.txt" ]; then
            CURRENT_VERSION=$(cat cpp-lib/version.txt | tr -d '[:space:]')
            TARGET_VERSION="v${{steps.version.outputs.version}}"

            if [ "$CURRENT_VERSION" = "$TARGET_VERSION" ]; then
              echo "needs-commit=false" >> $GITHUB_OUTPUT
              echo "✅ Version already updated to $TARGET_VERSION by developer"
            else
              echo "needs-commit=true" >> $GITHUB_OUTPUT
              echo "⚠️  Version needs updating from $CURRENT_VERSION to $TARGET_VERSION"
            fi
          else
            echo "needs-commit=true" >> $GITHUB_OUTPUT
            echo "⚠️  version.txt not found, will create it"
          fi

      - name: Configure Git
        if: steps.check-version.outputs.needs-commit == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update version references
        if: steps.check-version.outputs.needs-commit == 'true'
        run: |
          echo "Updating version to ${{steps.version.outputs.version}}"
          VERSION="${{steps.version.outputs.version}}" ./update-version.sh

      - name: Commit and push version bump
        id: commit-result
        if: steps.check-version.outputs.needs-commit == 'true'
        run: |
          git add -u

          # Check if there are any changes to commit
          if git diff --cached --quiet; then
            echo "✅ No changes to commit - version files are already up to date"
            echo "success=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          git commit -m "chore: bump version to v${{steps.version.outputs.version}}"

          # Fetch all remote references to get access to tags and branches
          echo "Fetching remote references..."
          git fetch origin --tags --prune

          # Get the branch where the tag was created
          # First, get the commit that the tag points to
          TAG_COMMIT=$(git rev-parse v${{steps.version.outputs.version}})
          echo "Tag v${{steps.version.outputs.version}} points to commit: $TAG_COMMIT"

          TAG_BRANCH=$(git branch -r --contains $TAG_COMMIT | head -1 | sed 's/origin\///' | tr -d '[:space:]')
          echo "Found branch containing tag commit: '$TAG_BRANCH'"

          echo "Pushing to branch: $TAG_BRANCH"
          git push origin HEAD:${TAG_BRANCH}
          echo "success=true" >> $GITHUB_OUTPUT

  package:
    name: Package
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Restore artifacts from cache
        uses: actions/cache/restore@v3
        with:
          path: downloaded-artifacts
          key: compiled-libs-${{ hashFiles('cpp-lib/**/*', 'vendor/**/*') }}
          restore-keys: |
            compiled-libs-

      - name: Package
        run: VERSION=${{needs.bump-version.outputs.version}} ./package.sh

      - name: Upload package directory
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: package/
          retention-days: 1

  publish:
    name: Publish
    needs: package
    runs-on: ubuntu-latest
    steps:
      - name: Download package directory
        uses: actions/download-artifact@v4
        with:
          name: npm-package
          path: package

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm install -g npm-cli-login
      - run: npm-cli-login login -u "${{ secrets.ARTIFACTORY_USER }}" -p "${{ secrets.ARTIFACTORY_PASS }}" -e "tools-team@tfgco.com" -r "https://artifactory.tfgco.com/artifactory/api/npm/npm-local" -s @wls
      - run: npm config set registry https://artifactory.tfgco.com/artifactory/api/npm/npm-local/

      - name: Publish to artifactory
        run: cd package && npm publish
